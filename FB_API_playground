{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# gist from: https://gist.github.com/jkuruzovich/b8485a368f80a3b88df46326cf54bbce\n",
    "\n",
    "# Facebook Graph API Example in Python\n",
    "# by James Thornton, http://jamesthornton.com\n",
    "\n",
    "# Facebook API Docs\n",
    "# https://developers.facebook.com/docs/graph-api/using-graph-api#reading\n",
    "\n",
    "# Get Your Facebook Access Token Here...\n",
    "# https://developers.facebook.com/tools/explorer/145634995501895/?method=GET&path=me\n",
    "\n",
    "# Before running this script...\n",
    "# Set your Facebook Access Token as an environment variable in your terminal:\n",
    "# $ export ACCESS_TOKEN={YOUR ACCESS TOKEN}\n",
    "\n",
    "# To download this script, use the curl command...\n",
    "# $ curl -O https://gist.githubusercontent.com/espeed/11114604/raw/a233d14604ea44f9d29af02cd2768b91caaad7af/fbme.py\n",
    "\n",
    "# To run this script, use the python command to execute the script in your terminal...\n",
    "# $ python fbme.py\n",
    "\n",
    "import os\n",
    "import json\n",
    "import requests\n",
    "import urllib\n",
    "import pprint\n",
    "from time import sleep\n",
    "\n",
    "import configparser\n",
    "Config = configparser.ConfigParser()\n",
    "Config.read('config.cnf')\n",
    "\n",
    "import facebook\n",
    "\n",
    "APP_ID = Config.get('facebook', 'app_id')\n",
    "APP_SECRET = Config.get('facebook', 'app_secret')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generate access token at [Facebook GraphAPI Explorer](https://developers.facebook.com/tools/explorer/)\n",
    "\n",
    "`https://developers.facebook.com/tools/explorer/`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "ACCESS_TOKEN = 'EAACEdEose0cBAO9LLYNO2K2zZCLcPaIJN8QX5c4QTfp9KxA9T1a2Y2Ds1ZAQTNUCamek7GpM1XfomLWTWOLJPqZBGyPMseDEa2lMbzqhvEnPDlvhpxNYGZBNDwpaCCv9yMZAH4nu77I8HZB1TPXKOyBFtdcs0CibzjZBAvVvxMp1BcrklSJrr6buRclI4dfevUZD'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# this was a FAILED attempt to generate the access token programatically\n",
    "# oauth_args = dict(client_id     = APP_ID,\n",
    "#                   client_secret = APP_SECRET,\n",
    "#                   grant_type    = 'client_credentials')\n",
    "# oauth_curl_cmd = ['curl',\n",
    "#                   'https://graph.facebook.com/oauth/access_token?' + urllib.urlencode(oauth_args)]\n",
    "# oauth_response = subprocess.Popen(oauth_curl_cmd,\n",
    "#                                   stdout = subprocess.PIPE,\n",
    "#                                   stderr = subprocess.PIPE).communicate()[0]\n",
    "\n",
    "# try:\n",
    "#     oauth_access_token = urlparse.parse_qs(str(oauth_response))['access_token'][0]\n",
    "# except KeyError:\n",
    "#     print('Unable to grab an access token!')\n",
    "#     exit()\n",
    "\n",
    "# graph = facebook.GraphAPI(oauth_access_token)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "graph = facebook.GraphAPI(ACCESS_TOKEN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_facebook(doi):\n",
    "    query_url = 'http://dx.doi.org/%s' % doi\n",
    "    url = 'v2.10/?' + urllib.parse.urlencode({'id': query_url, 'fields': 'engagement'})\n",
    "    try: \n",
    "        response = graph.request(url)\n",
    "        return response['engagement']\n",
    "    except: \n",
    "        return False "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_altmetric(doi):\n",
    "    global counter\n",
    "    url = 'http://api.altmetric.com/v1/fetch/doi/%s' % doi\n",
    "    params = {'key': Config.get('altmetric', 'key')}\n",
    "\n",
    "    try: \n",
    "        response = requests.get(url, params=params)\n",
    "        if response.status_code == 200:\n",
    "            return response.json()['counts']['facebook']\n",
    "        else:\n",
    "            return False\n",
    "    except: \n",
    "        return False    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'comment_plugin_count': 0, 'comment_count': 0, 'share_count': 5, 'reaction_count': 1}\n",
      "{'unique_users': ['437595109618864'], 'unique_users_count': 1, 'posts_count': 2}\n"
     ]
    }
   ],
   "source": [
    "print(get_facebook('10.1590/S1413-92511998000200004'))\n",
    "print\n",
    "print(get_altmetric('10.1590/S1413-92511998000200004'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'engagement': {'comment_count': 0,\n",
       "  'comment_plugin_count': 0,\n",
       "  'reaction_count': 2,\n",
       "  'share_count': 2},\n",
       " 'id': 'http://www.tandfonline.com/eprint/QK4zmjpieTnYdMD72ntV/full'}"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query_url = 'http://www.tandfonline.com/eprint/QK4zmjpieTnYdMD72ntV/full'\n",
    "url = 'v2.10/?' + urllib.parse.urlencode({'id': query_url, 'fields': 'engagement'})\n",
    "graph.request(url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# a URL that does not resolve nicely because of internal link resolver\n",
    "doi = '10.1016/j.plefa.2017.04.005'\n",
    "r = requests.head('http://dx.doi.org/%s' % doi, allow_redirects=True)\n",
    "print(r.url)\n",
    "\n",
    "print(get_facebook(doi))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "altmetrics",
   "language": "python",
   "name": "altmetrics"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
